import ColumnItem from "../element/ColumnItem";
import FilterItem from "../element/FilterItem";
import QuickFilter from "./QuickFilter";
import StateRegistry from "../state/StateRegistry";
import AddQuickFiltersPopover, { SelectedField } from "../helper/AddQuickFilterPopover";

import Panel from "sap/m/Panel";
import ScrollContainer from "sap/m/ScrollContainer";
import OverflowToolbar from "sap/m/OverflowToolbar";
import Button from "sap/m/Button";
import ToolbarSpacer from "sap/m/ToolbarSpacer";
import Title from "sap/m/Title";
import VerticalLayout from "sap/ui/layout/VerticalLayout";
import { ButtonType } from "sap/m/library";
import jQuery from "sap/ui/thirdparty/jquery";
import Event from "sap/ui/base/Event";
import Control from "sap/ui/core/Control";

/**
 * FilterBar with vertical orientation
 *
 * @namespace devepos.qdrt.control
 */
export default class SideFilterPanel extends Panel {
    metadata = {
        properties: {
            useToolbar: {
                type: "boolean",
                group: "Misc",
                defaultValue: true
            }
        },
        aggregations: {
            /**
             * Holds the current filter items
             */
            filterItems: { type: "devepos.qdrt.element.FilterItem", multiple: true, singularName: "filterItem" }
        },
        events: {}
    };
    /**
     * Currently no custom renderer is needed
     */
    renderer = "sap.m.PanelRenderer";

    private _filterContainer: VerticalLayout;
    private _scrollContainer: ScrollContainer;
    private _useToolbarUpdated = true;

    //#region methods generated by ui5 library for metadata
    getColumnItems?(): ColumnItem[];
    setColumnItems?(items: ColumnItem[]): this;
    addColumnItem?(item: ColumnItem): this;
    getFilterItems?(): FilterItem[];
    setFilterItems?(items: FilterItem[]): this;
    addFilterItem?(item: FilterItem): this;
    getUseToolbar?(): boolean;
    //#endregion

    init(): void {
        Panel.prototype.init.call(this);
        this.setWidth("100%");
        this.setHeight("100%");
        this._filterContainer = new VerticalLayout({
            width: "100%"
        });
        this._filterContainer.addStyleClass("deveposQdrt-SideFilterPanel__Container");
        this._scrollContainer = new ScrollContainer({
            content: this._filterContainer,
            width: "100%",
            height: "100%",
            horizontal: false,
            vertical: true
        });

        this.addContent(this._scrollContainer);
    }
    onAfterRendering(event: jQuery.Event): void {
        // do custom afterRendering
        Panel.prototype.onAfterRendering.call(this, event);
    }
    onBeforeRendering(event: jQuery.Event): void {
        // do custom beforeRendering
        if (this._useToolbarUpdated) {
            if (this.getUseToolbar()) {
                this.setHeaderToolbar(
                    new OverflowToolbar({
                        content: [
                            new Title({ text: this.getHeaderText() }),
                            new ToolbarSpacer(),
                            new Button({
                                icon: "sap-icon://add",
                                tooltip: "{i18n>entity_sideFilterPanel_newFilter}",
                                type: ButtonType.Transparent,
                                press: (event: Event) => {
                                    this._addNewFilter(event);
                                }
                            }),
                            new Button({
                                icon: "sap-icon://delete",
                                tooltip: "{i18n>entity_sideFilterPanel_deleteAllFilters}",
                                type: ButtonType.Transparent,
                                press: () => {
                                    this._filterContainer.removeAllContent();
                                }
                            })
                        ]
                    })
                );
            } else {
                this.destroyHeaderToolbar();
            }
            this._useToolbarUpdated = false;
        }
        Panel.prototype.onBeforeRendering.call(this, event);
    }
    setUseToolbar(useToolbar: boolean): this {
        this.setProperty("useToolbar", useToolbar);
        this._useToolbarUpdated = true;
        return this;
    }
    exit(): void {
        Panel.prototype.exit.call(this);
    }

    private async _addNewFilter(event: Event) {
        const addFiltersPopover = new AddQuickFiltersPopover(StateRegistry.getEntityState().getData());
        const selectedFilters = await addFiltersPopover.showPopover(event.getSource() as Control);
        if (selectedFilters?.length > 0) {
            for (const selectedFilter of selectedFilters) {
                this._filterContainer.addContent(this._createQuickFilter(selectedFilter));
            }
        }
    }
    private _createQuickFilter(filter: SelectedField) {
        return new QuickFilter({
            columnName: filter.name,
            label: filter.label,
            type: filter.type,
            tooltip: filter.tooltip,
            valueHelpRequest: this._onValueHelpRequest.bind(this)
        });
    }

    private _onValueHelpRequest(event: Event) {
        const quickFilter = event.getSource() as QuickFilter;
        // TODO: show value help dialog
    }
}
