import QuickFilter from "./QuickFilter";
import StateRegistry from "../state/StateRegistry";
import AddQuickFiltersPopover, { SelectedField } from "../helper/AddQuickFilterPopover";
import ValueHelpFactory from "../helper/valuehelp/ValueHelpFactory";
import { FieldMetadata } from "../model/ServiceModel";
import { TableFilters } from "../model/Entity";

import Panel from "sap/m/Panel";
import ScrollContainer from "sap/m/ScrollContainer";
import OverflowToolbar from "sap/m/OverflowToolbar";
import Button from "sap/m/Button";
import ToolbarSpacer from "sap/m/ToolbarSpacer";
import Title from "sap/m/Title";
import VerticalLayout from "sap/ui/layout/VerticalLayout";
import { ButtonType } from "sap/m/library";
import jQuery from "sap/ui/thirdparty/jquery";
import Event from "sap/ui/base/Event";
import Control from "sap/ui/core/Control";
import Input from "sap/m/Input";

/**
 * FilterBar with vertical orientation
 *
 * @namespace com.devepos.qdrt.control
 */
export default class SideFilterPanel extends Panel {
    metadata = {
        properties: {
            useToolbar: { type: "boolean", group: "Misc", defaultValue: true },
            /**
             * Array with all metadata of all available filters
             */
            availableFilterMetadata: { type: "object", group: "Misc" },
            /**
             * Map with all visible filters
             */
            visibleFilters: { type: "object", group: "Misc" }
        },
        aggregations: {},
        events: {}
    };
    /**
     * Currently no custom renderer is needed
     */
    renderer = "sap.m.PanelRenderer";

    private _filterContainer: VerticalLayout;
    private _scrollContainer: ScrollContainer;
    private _useToolbarUpdated = true;
    private _ignoreFilterChangeEvent = false;

    //#region methods generated by ui5 library for metadata
    getUseToolbar?(): boolean;
    getAvailableFilterMetadata?(): FieldMetadata[];
    getVisibleFilters?(): TableFilters;
    setVisibleFilters?(filters: TableFilters): this;
    //#endregion

    init(): void {
        Panel.prototype.init.call(this);
        this.setWidth("100%");
        this.setHeight("100%");
        this._filterContainer = new VerticalLayout({
            width: "100%"
        });
        this._filterContainer.addStyleClass("deveposQdrt-SideFilterPanel__Container");
        this._scrollContainer = new ScrollContainer({
            content: this._filterContainer,
            width: "100%",
            height: "100%",
            horizontal: false,
            vertical: true
        });
        this.addContent(this._scrollContainer);
    }
    onAfterRendering(event: jQuery.Event): void {
        // do custom afterRendering
        Panel.prototype.onAfterRendering.call(this, event);
    }
    onBeforeRendering(event: jQuery.Event): void {
        // do custom beforeRendering
        if (this._useToolbarUpdated) {
            if (this.getUseToolbar()) {
                this.setHeaderToolbar(
                    new OverflowToolbar({
                        content: [
                            new Title({ text: this.getHeaderText() }),
                            new ToolbarSpacer(),
                            new Button({
                                icon: "sap-icon://add",
                                tooltip: "{i18n>entity_sideFilterPanel_newFilter}",
                                type: ButtonType.Transparent,
                                press: this._addNewFilter.bind(this)
                            }),
                            new Button({
                                icon: "sap-icon://clear-filter",
                                tooltip: "{i18n>entity_sideFilterPanel_clearFilterValues}",
                                type: ButtonType.Transparent,
                                press: this._clearExistingFilters.bind(this)
                            }),
                            new Button({
                                icon: "sap-icon://delete",
                                tooltip: "{i18n>entity_sideFilterPanel_deleteAllFilters}",
                                type: ButtonType.Transparent,
                                press: () => {
                                    this._filterContainer.removeAllContent();
                                    this.setVisibleFilters({});
                                }
                            })
                        ]
                    })
                );
            } else {
                this.destroyHeaderToolbar();
            }
            this._useToolbarUpdated = false;
        }
        Panel.prototype.onBeforeRendering.call(this, event);
    }
    setUseToolbar(useToolbar: boolean): this {
        this.setProperty("useToolbar", useToolbar);
        this._useToolbarUpdated = true;
        return this;
    }
    exit(): void {
        Panel.prototype.exit.call(this);
    }

    private async _addNewFilter(event: Event) {
        const visibleFilters = this.getVisibleFilters();
        const addFiltersPopover = new AddQuickFiltersPopover(
            this.getAvailableFilterMetadata().filter(filterMeta => !visibleFilters.hasOwnProperty(filterMeta.name))
        );
        const selectedFilters = await addFiltersPopover.showPopover(event.getSource() as Control);
        if (selectedFilters?.length > 0) {
            for (const selectedFilter of selectedFilters) {
                visibleFilters[selectedFilter.name] = {};
                this._filterContainer.addContent(this._createQuickFilter(selectedFilter));
            }
        }
    }
    private _createQuickFilter(filter: SelectedField) {
        return new QuickFilter({
            columnName: filter.name,
            label: filter.label,
            type: filter.fieldMetadata.type,
            tooltip: filter.tooltip,
            // singleValueOnly: true,
            referenceFieldMetadata: filter.fieldMetadata,
            filterData: `{${this.getBinding("visibleFilters").getPath()}/${filter.name}}`,
            remove: (event: Event) => {
                delete this.getVisibleFilters()[(event.getSource() as QuickFilter).getColumnName()];
            },
            valueHelpRequest: this._onValueHelpRequest.bind(this),
            change: (event: Event) => {
                if (this._ignoreFilterChangeEvent) {
                    return;
                }
                console.log({ ...(event?.getParameters() || {}) });
            }
        });
    }

    private _clearExistingFilters() {
        this._ignoreFilterChangeEvent = true;
        for (const quickFilter of this._filterContainer.getContent()) {
            (quickFilter as QuickFilter).clear();
        }
        this._ignoreFilterChangeEvent = false;
    }

    private async _onValueHelpRequest(event: Event) {
        const quickFilter = event.getSource() as QuickFilter;
        const entityState = StateRegistry.getEntityState();

        // Get the value help metadata information for the filter field
        quickFilter.setBusy(true);
        const vhMetadata = await entityState.getFieldValueHelpInfo(quickFilter.getColumnName());
        quickFilter.setBusy(false);
        const vhDialog = ValueHelpFactory.getInstance().createValueHelpDialog(
            vhMetadata,
            quickFilter.getFilterControl() as Input,
            !quickFilter.getSingleValueOnly()
        );
        const vhResult = await vhDialog.showDialog();
        if (!vhResult.cancelled) {
            if (quickFilter.getSingleValueOnly()) {
                quickFilter.setValue(vhResult.tokens[0].getKey());
            } else {
                quickFilter.setTokens(vhResult.tokens);
            }
        }
    }
}
