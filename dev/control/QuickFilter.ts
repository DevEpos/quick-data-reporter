import Control, { $ControlSettings } from "sap/ui/core/Control";
import Button from "sap/m/Button";
import MultiInput from "sap/m/MultiInput";
import Text from "sap/m/Text";
import FlexBox from "sap/m/FlexBox";
import VerticalLayout from "sap/ui/layout/VerticalLayout";
import RenderManager from "sap/ui/core/RenderManager";
import { ButtonType, FlexAlignItems, FlexJustifyContent } from "sap/m/library";
import Item from "sap/ui/core/Item";
import MultiComboBox from "sap/m/MultiComboBox";
import Token from "sap/m/Token";
import Parameters from "sap/ui/core/theming/Parameters";

/**
 * Control settings for {@link devepos.qdrt.control.QuickFilter}
 */
export interface QuickFilterSettings extends $ControlSettings {
    /**
     * The name of the column
     */
    columnName: string;
    /**
     * Label of the column
     */
    label?: string;
    /**
     * Data type of the column
     */
    type?: string;
    /**
     * Gets fired if value help request is triggered on filter control
     */
    valueHelpRequest?: Function;
}

/**
 * Quick Filter in {@link devepos.qdrt.control.SideFilterBar}
 *
 * @namespace devepos.qdrt.control
 */
export default class QuickFilter extends Control {
    metadata = {
        properties: {
            /**
             * The name of the column for which filter shall be created
             */
            columnName: {
                type: "string",
                group: "Misc"
            },
            /**
             * The label for the filter, normally this should be the label of the column
             */
            label: {
                type: "string",
                group: "Misc"
            },
            /**
             * The data type of the column. This is needed to create the appropriate control.
             * If no type is supplied the default control will be a {@link sap.m.MultiInput} control.
             */
            type: {
                type: "string",
                group: "Misc"
            }
        },
        aggregations: {
            /**
             * Control for the filter
             */
            filter: { type: "sap.ui.core.Control", multiple: false, singularName: "filter", visibility: "hidden" }
        },
        events: {
            /**
             * Will be fired before the actual value help request
             */
            valueHelpRequest: {}
        }
    };
    renderer = {
        apiVersion: 2,
        render(rm: RenderManager, control: QuickFilter): void {
            // create a wrapper element with some styling
            rm.openStart("div", control);
            rm.class("deveposQdrt-QuickFilter");
            // apply border-color style via theme parameter
            rm.style("border-color", Parameters.get("sapUiGroupTitleBorderColor") as string);
            rm.openEnd();
            // render the actual control
            rm.renderControl(control.getAggregation("filter") as Control);
            rm.close("div");
        }
    };

    private _filterName: Text;
    private _filterControl: Control;
    private _updatedProperties: boolean;
    private _filterCont: VerticalLayout;

    constructor(settings: QuickFilterSettings) {
        super(settings);
    }

    //#region empty methods generated by ui5 library for metadata
    getType?(): string;
    getLabel?(): string;
    getColumnName?(): string;
    fireValueHelpRequest?(): this;
    //#endregion

    init(): void {
        this._filterName = new Text();
        this._filterCont = new VerticalLayout({
            width: "100%",
            content: [
                new FlexBox({
                    alignItems: FlexAlignItems.Center,
                    justifyContent: FlexJustifyContent.SpaceBetween,
                    items: [
                        this._filterName,
                        new Button({
                            icon: "sap-icon://decline",
                            tooltip: "{i18n>entity_sideFilterBar_filter_delete}",
                            type: ButtonType.Transparent,
                            press: () => {
                                this.destroy();
                            }
                        })
                    ]
                })
            ]
        });
        // this._filterCont.addStyleClass("deveposQdrt-QuickFilter");
        this.setAggregation("filter", this._filterCont);

        sap.ui.getCore().attachThemeChanged(this._onThemeChanged, this);
    }
    destroy(): void {
        super.destroy.apply(this);
        sap.ui.getCore().detachThemeChanged(this._onThemeChanged, this);
    }
    setColumnName(columnName: string): this {
        this.setProperty("columnName", columnName);

        this._updatedProperties = true;
        return this;
    }

    setLabel(label: string): this {
        this.setProperty("label", label);

        this._updatedProperties = true;
        return this;
    }

    setTooltip(tooltip: string): this {
        super.setTooltip(tooltip);
        this._updatedProperties = true;
        return this;
    }

    setTokens(tokens: Token[]): this {
        return this;
    }

    onBeforeRendering(): void {
        if (!this._filterControl) {
            this._filterControl = this._createControl();
            this._attachEventHandlers();
            this._filterCont.addContent(this._filterControl);
        }

        if (this._updatedProperties) {
            const label = this.getLabel();
            const columnName = this.getColumnName();
            if (label !== "") {
                this._filterName?.setText(label);
            } else {
                this._filterName?.setText(columnName);
            }

            const tooltip = this.getTooltip();
            this._filterName?.setTooltip(tooltip);
        }

        this._updatedProperties = false;
    }
    private _attachEventHandlers() {
        if (this._filterControl instanceof MultiInput) {
            this._filterControl.attachValueHelpRequest(
                null,
                () => {
                    this.fireValueHelpRequest();
                },
                this
            );
        }
    }

    private _createControl(): Control {
        const type = this.getType();
        switch (type) {
            case "Boolean":
                return new MultiComboBox({
                    width: "100%",
                    editable: true,
                    items: [
                        new Item({
                            key: "X", // should be string form of "true" because deserialization will convert it to "X"/"" anyway??
                            text: "{i18n>booleanType_yes}"
                        }),
                        new Item({
                            key: "",
                            text: "{i18n>booleanType_no}"
                        })
                    ]
                });

            default:
                return new MultiInput({ width: "100%" });
        }
    }

    /**
     * As theme parameters are used the control needs to be re-rendered upon
     * theme change.
     */
    private _onThemeChanged() {
        this.invalidate();
    }
}
